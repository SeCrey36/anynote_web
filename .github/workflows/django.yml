name: Django CI

on:
  push:
    branches: 
      - '*'
  pull_request:
    branches:
      - '*'
env:
  DATABASE: sqlite3
  DJANGO_SETTINGS_MODULE: anynote.settings
  
jobs:
  build:

    runs-on: ubuntu-latest
    #strategy:
    #  max-parallel: 5
    #  matrix:
    #    python-version: [3.7, 3.8, 3.9, 3.11, 3.12]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12 #${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: 3.12 #${{ matrix.python-version }}
    # poetry github actions from https://github.com/snok/install-poetry
    #----------------------------------------------
    #--------  install & configure poetry  --------
    #----------------------------------------------
    - name: Install poetry
      uses: snok/install-poetry@v1
      with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true
    #----------------------------------------------
    #-----  load cached venv if cache exists  -----
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    #----------------------------------------------
    # install dependencies if cache does not exist
    #----------------------------------------------
    - name: Install dependencies (no cache)
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root 
    #----------------------------------------------
    #-------------  lint with Ruff  --------------- 
    #----------------------------------------------
    - name: Check with ruff
      run: |
        poetry run ruff check --fix
#    - name: Run Tests
#      run: |
#        python manage.py pytest
